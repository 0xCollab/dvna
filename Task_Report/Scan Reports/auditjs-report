[1/263] nodejs 8.10.0  [VULNERABLE]   14 known vulnerabilities affecting installed version

[CVE-2018-7160] The Node.js inspector, in 6.x and later is vulnerable to a DNS rebinding attack ...
The Node.js inspector, in 6.x and later is vulnerable to a DNS rebinding attack which could be exploited to perform remote code execution. An attack is possible from malicious websites open in a web browser on the same computer, or another computer with network access to the computer running the Node.js process. A malicious website could use a DNS rebinding attack to trick the web browser to bypass same-origin-policy checks and to allow HTTP connections to localhost or to hosts on the local network. If a Node.js process with the debug port active is running on localhost or on a host on the local network, the malicious website could connect to it as a debugger, and get full code execution access.

ID: 4b9ebd46-095f-484d-b6a5-611b13edfc43
Details: https://ossindex.sonatype.org/vuln/4b9ebd46-095f-484d-b6a5-611b13edfc43

[CVE-2018-7159]  Improper Input Validation
The HTTP parser in all current versions of Node.js ignores spaces in the `Content-Length` header, allowing input such as `Content-Length: 1 2` to be interpreted as having a value of `12`. The HTTP specification does not allow for spaces in the `Content-Length` value and the Node.js HTTP parser has been brought into line on this particular difference. The security risk of this flaw to Node.js users is considered to be VERY LOW as it is difficult, and may be impossible, to craft an attack that makes use of this flaw in a way that could not already be achieved by supplying an incorrect value for `Content-Length`. Vulnerabilities may exist in user-code that make incorrect assumptions about the potential accuracy of this value compared to the actual length of the data supplied. Node.js users crafting lower-level HTTP utilities are advised to re-check the length of any input supplied after parsing is complete.

ID: 9cc431eb-6510-4ec8-ada8-47780fbf287c
Details: https://ossindex.sonatype.org/vuln/9cc431eb-6510-4ec8-ada8-47780fbf287c

[CVE-2018-7167]  Improper Restriction of Operations within the Bounds of a Memory Buffer
Calling Buffer.fill() or Buffer.alloc() with some parameters can lead to a hang which could result in a Denial of Service. In order to address this vulnerability, the implementations of Buffer.alloc() and Buffer.fill() were updated so that they zero fill instead of hanging in these cases. All versions of Node.js 6.x (LTS "Boron"), 8.x (LTS "Carbon"), and 9.x are vulnerable. All versions of Node.js 10.x (Current) are NOT vulnerable.

ID: 15d46dd6-9da0-4f85-9d7e-fa3068412a85
Details: https://ossindex.sonatype.org/vuln/15d46dd6-9da0-4f85-9d7e-fa3068412a85

[CVE-2018-7161]  Improper Input Validation
All versions of Node.js 8.x, 9.x, and 10.x are vulnerable and the severity is HIGH. An attacker can cause a denial of service (DoS) by causing a node server providing an http2 server to crash. This can be accomplished by interacting with the http2 server in a manner that triggers a cleanup bug where objects are used in native code after they are no longer available. This has been addressed by updating the http2 implementation.

ID: 52b87802-a167-4001-9b5c-8d405a65a734
Details: https://ossindex.sonatype.org/vuln/52b87802-a167-4001-9b5c-8d405a65a734

[CVE-2018-0734] The OpenSSL DSA signature algorithm has been shown to be vulnerable to a timing ...
The OpenSSL DSA signature algorithm has been shown to be vulnerable to a timing side channel attack. An attacker could use variations in the signing algorithm to recover the private key. Fixed in OpenSSL 1.1.1a (Affected 1.1.1). Fixed in OpenSSL 1.1.0j (Affected 1.1.0-1.1.0i). Fixed in OpenSSL 1.0.2q (Affected 1.0.2-1.0.2p).

ID: 61b37c84-9c43-42dd-8c52-047b06031fd8
Details: https://ossindex.sonatype.org/vuln/61b37c84-9c43-42dd-8c52-047b06031fd8

[CVE-2018-5407]  Information Exposure
Simultaneous Multi-threading (SMT) in processors can enable local users to exploit software vulnerable to timing attacks via a side-channel timing attack on 'port contention'.

ID: 56623b2d-6166-4edb-ace2-91bf525f44ff
Details: https://ossindex.sonatype.org/vuln/56623b2d-6166-4edb-ace2-91bf525f44ff

[CVE-2018-12116]  Inconsistent Interpretation of HTTP Requests ("HTTP Request Smuggling")
Node.js: All versions prior to Node.js 6.15.0 and 8.14.0: HTTP request splitting: If Node.js can be convinced to use unsanitized user-provided Unicode data for the `path` option of an HTTP request, then data can be provided which will trigger a second, unexpected, and user-defined HTTP request to made to the same server.

ID: f98ff428-6475-4765-a3dc-2610578ef144
Details: https://ossindex.sonatype.org/vuln/f98ff428-6475-4765-a3dc-2610578ef144

[CVE-2018-12123]  Improper Input Validation
Node.js: All versions prior to Node.js 6.15.0, 8.14.0, 10.14.0 and 11.3.0: Hostname spoofing in URL parser for javascript protocol: If a Node.js application is using url.parse() to determine the URL hostname, that hostname can be spoofed by using a mixed case "javascript:" (e.g. "javAscript:") protocol (other protocols are not affected). If security decisions are made about the URL based on the hostname, they may be incorrect.

ID: 784c3524-59e7-453e-b881-6b43be3f599f
Details: https://ossindex.sonatype.org/vuln/784c3524-59e7-453e-b881-6b43be3f599f

[CVE-2018-1000168]  Improper Input Validation, NULL Pointer Dereference
nghttp2 version >= 1.10.0 and nghttp2 <= v1.31.0 contains an Improper Input Validation CWE-20 vulnerability in ALTSVC frame handling that can result in segmentation fault leading to denial of service. This attack appears to be exploitable via network client. This vulnerability appears to have been fixed in >= 1.31.1.

ID: 8a0c1adf-93c6-4986-96af-9b744b2eda07
Details: https://ossindex.sonatype.org/vuln/8a0c1adf-93c6-4986-96af-9b744b2eda07

[CVE-2018-12115] In all versions of Node.js prior to 6.14.4, 8.11.4 and 10.9.0 when used with UCS...
In all versions of Node.js prior to 6.14.4, 8.11.4 and 10.9.0 when used with UCS-2 encoding (recognized by Node.js under the names `'ucs2'`, `'ucs-2'`, `'utf16le'` and `'utf-16le'`), `Buffer#write()` can be abused to write outside of the bounds of a single `Buffer`. Writes that start from the second-to-last position of a buffer cause a miscalculation of the maximum length of the input bytes to be written.

ID: 0f718d9c-5cca-44f6-8ca2-2cafe5bfe406
Details: https://ossindex.sonatype.org/vuln/0f718d9c-5cca-44f6-8ca2-2cafe5bfe406

[CVE-2018-12122]  Uncontrolled Resource Consumption ("Resource Exhaustion")
Node.js: All versions prior to Node.js 6.15.0, 8.14.0, 10.14.0 and 11.3.0: Slowloris HTTP Denial of Service: An attacker can cause a Denial of Service (DoS) by sending headers very slowly keeping HTTP or HTTPS connections and associated resources alive for a long period of time.

ID: 12c1f8df-f38d-4c1b-9a5d-67437d9a0220
Details: https://ossindex.sonatype.org/vuln/12c1f8df-f38d-4c1b-9a5d-67437d9a0220

[CVE-2018-12121]  Uncontrolled Resource Consumption ("Resource Exhaustion")
Node.js: All versions prior to Node.js 6.15.0, 8.14.0, 10.14.0 and 11.3.0: Denial of Service with large HTTP headers: By using a combination of many requests with maximum sized headers (almost 80 KB per connection), and carefully timed completion of the headers, it is possible to cause the HTTP server to abort from heap allocation failure. Attack potential is mitigated by the use of a load balancer or other proxy layer.

ID: b018e8be-a501-4ad6-92de-6e2613a64714
Details: https://ossindex.sonatype.org/vuln/b018e8be-a501-4ad6-92de-6e2613a64714

CWE-770: Allocation of Resources Without Limits or Throttling
The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated, in violation of the intended security policy for that actor.

ID: da7a1fb7-07c1-4066-a3b4-7c4d88823517
Details: https://ossindex.sonatype.org/vuln/da7a1fb7-07c1-4066-a3b4-7c4d88823517

[CVE-2019-5737]  Uncontrolled Resource Consumption ("Resource Exhaustion")
An attacker can cause a Denial of Service (DoS) by establishing an HTTP or HTTPS connection in keep-alive mode and by sending headers very slowly thereby keeping the connection and associated resources alive for a long period of time. Attack potential is mitigated by the use of a load balancer or other proxy layer. This vulnerability is an extension of CVE-2018-12121, addressed in November and impacts all active Node.js release lines including 6.x before 6.17.0, 8.x before 8.15.1, 10.x before 10.15.2, and 11.x before 11.10.1.

ID: 39ead3ac-005f-4bd2-b912-563da75b526d
Details: https://ossindex.sonatype.org/vuln/39ead3ac-005f-4bd2-b912-563da75b526d
------------------------------------------------------------

--- snipped ---

------------------------------------------------------------
[152/263] express-fileupload 0.4.0  [VULNERABLE]   1 known vulnerabilities affecting installed version

CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')
The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended.

ID: b5cc4326-6250-4a6d-ac4a-31954f0e8cf9
Details: https://ossindex.sonatype.org/vuln/b5cc4326-6250-4a6d-ac4a-31954f0e8cf9
Dependency path: /express-fileupload
------------------------------------------------------------

--- snipped ---

------------------------------------------------------------
[190/263] mathjs 3.10.1  [VULNERABLE]   3 known vulnerabilities affecting installed version

[CVE-2017-1001002] math.js before 3.17.0 had an arbitrary code execution in the JavaScript engine. ...
math.js before 3.17.0 had an arbitrary code execution in the JavaScript engine. Creating a typed function with JavaScript code in the name could result arbitrary execution.

ID: 1e6c8e7a-4371-43fe-8772-1aedc76baca1
Details: https://ossindex.sonatype.org/vuln/1e6c8e7a-4371-43fe-8772-1aedc76baca1
Dependency path: /mathjs

[CVE-2017-1001003]  Improper Input Validation
math.js before 3.17.0 had an issue where private properties such as a constructor could be replaced by using unicode characters when creating an object.

ID: 51031497-800c-43b4-a798-95c20e0d17e9
Details: https://ossindex.sonatype.org/vuln/51031497-800c-43b4-a798-95c20e0d17e9
Dependency path: /mathjs

CWE-94: Improper Control of Generation of Code ('Code Injection')
The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.

ID: 6e815112-1cfa-48a6-a98f-e5e5fd70d4fa
Details: https://ossindex.sonatype.org/vuln/6e815112-1cfa-48a6-a98f-e5e5fd70d4fa
Dependency path: /mathjs
------------------------------------------------------------

--- snipped ---

------------------------------------------------------------
[196/263] typed-function 0.10.5  [VULNERABLE]   2 known vulnerabilities affecting installed version

[CVE-2017-1001004]  Improper Input Validation
typed-function before 0.10.6 had an arbitrary code execution in the JavaScript engine. Creating a typed function with JavaScript code in the name could result arbitrary execution.

ID: 9cc5f186-a03a-4c49-910a-047ea7bae9ec
Details: https://ossindex.sonatype.org/vuln/9cc5f186-a03a-4c49-910a-047ea7bae9ec
Dependency path: /mathjs/typed-function

CWE-94: Improper Control of Generation of Code ('Code Injection')
The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.

ID: 656aa499-2044-4aaf-a920-83bfed2e56d9
Details: https://ossindex.sonatype.org/vuln/656aa499-2044-4aaf-a920-83bfed2e56d9
Dependency path: /mathjs/typed-function
------------------------------------------------------------

--- snipped ---

------------------------------------------------------------
[217/263] sequelize 4.44.3  [VULNERABLE]   2 known vulnerabilities affecting installed version

CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.

ID: bc5cce9c-eaf8-42de-bfc2-2b90655f5225
Details: https://ossindex.sonatype.org/vuln/bc5cce9c-eaf8-42de-bfc2-2b90655f5225
Dependency path: /sequelize

CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')
The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.

ID: 47c93aa7-1b5c-4c19-9567-643dc7871097
Details: https://ossindex.sonatype.org/vuln/47c93aa7-1b5c-4c19-9567-643dc7871097
Dependency path: /sequelize
------------------------------------------------------------

--- snipped ---

Audited dependencies: 263, Vulnerable: 5, Ignored: 0
